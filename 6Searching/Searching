#查找
+ **索引查找**先对索引块关键字进行折半查找，再对索引块进行顺序查找
+ **B树**的特点:一棵m阶的B树，除根结点子树个数为满足 (m/2)向上取整 <= n <= m , 关键字个数l满足 l = n-1 关键字左子树的所有结点值都比关键字小，关键字右子树的所有结点值都比关键字大
    + **B树的插入**:
        1. 查找key的记录，若查找成功，则操作失败；若查找失败，则插入失败的叶子结点中
        2. 若叶子结点的个数等于m，则以叶子结点第 m-1向上取整 个关键字为拆分点，将此关键字加入父结点 拆分点左边的结点不变，右边的结点作为新的子树结点，让父结点指针指向它，若父结点关键字也等于 m个则以此类推
+ **B树的删除**:
    1. 若删除了结点后，该结点关键字个数大于 (m/2)向上取整-1:
        1. 若为终端结点，则直接删去关键字和左(右)边子树
        2. 若不为终端结点，则可以用其最深子树最靠近的结点代替，并看作是删除了终端结点
    2. 若该结点关键字个数等于 (m/2)向上取整-1:
        1. 若该结点兄弟结点关键字个数大于 (m/2)向上取整-1，其兄弟结点靠近该结点这一侧的结点 转移到父结点上，再将父结点靠近该结点这一侧的结点移到下面来
        2. 若该结点兄弟结点关键字个数小于 (m/2)向上取整-1，将该结点层剩余信息连同父结点靠近 该结点这一侧的结点插入兄弟结点中，若父结点的关键词小于于 (m/2)向上取整-1 则以此类推
+ **B+树**的特点:一棵m阶的B+树，除根结点子树个数为满足 (m/2)向上取整 <= n <= m , 关键字个数l满足 l = n 非叶子结点仅起索引作用，其关键字表示其指向的子树中最大的关键字
+ **散列函数**构造方法:
    1. 直接定址法:取关键字的某个线性函数值(适合关键字分布连续)
    2. 除留余数法:取一个不大于散列表表长m的数p，求关键字与p的余数
    3. 数字分析法
    4. 平方取中法:取关键字平方值的中间几位作为散列地址 
+ **处理冲突**的方法:
    1. 开放定址法:Hi = (H(key)+di)%m
       + 线性探测法:d取1、2、3...m-1(发生聚集现象)
       + 平方探测法:d取0^2、1^2、-1^2...
       + 再散列法:发生冲突时，再使用第二个散列函数
       + 伪随机序列法 
    2. 拉链法:
       + 对于同一个哈希值的关键字，使用链表存储
+ **散列表的查找效率**  取决于三个因素:散列函数、处理冲突的方法、装填因子(表中记录数/散列表长度)